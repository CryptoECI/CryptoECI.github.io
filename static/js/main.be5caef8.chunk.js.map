{"version":3,"sources":["components/Timeline.js","components/Consumption.js","components/DisplayPools.js","components/DisplayMiners.js","components/Card.js","Dashboard.js","components/Methodology.js","components/Single.js","components/research.pdf","App.js","index.js"],"names":["Timeline","coin","algorithm","time","reward","electricity","miner","useState","resp","setResp","received","setReceived","useEffect","a","url","axios","get","response","calcUpper","price","timeSec","parsedRew","parseFloat","replace","includes","upperEC","Math","round","calcLower","hashrate","networkHR","parseStringHashrate","lowerEC","parseInt","unitConvert","charAt","length","power","c","str","timeConverter","UNIX_timestamp","Date","year","getFullYear","month","getMonth","date","getDate","getHours","getMinutes","getSeconds","id","className","rawData","data","count","Object","keys","dataArr","delta","floor","i","key","lb","ub","point","push","getData","console","log","class","ResponsiveContainer","width","height","AreaChart","margin","top","right","bottom","left","XAxis","type","dataKey","YAxis","Tooltip","Area","stroke","fill","renderData","Consumption","props","Annualize","energy","renderBound","val","unit","x","toString","renderAnnualize","DisplayPools","expand","pools","showAll","map","pool","style","color","countries","DisplayMiners","miners","name","Card","code","info","setCoin","setPools","setMiners","expandPool","setExpandPool","expandMiner","setExpandMiner","showTimeline","setShowTimeline","twoSigFig","num","network_hashrate","indexOf","len","substring","getPrefix","onClick","backgroundColor","e","preventDefault","Dashboard","codes","setCodes","infos","setInfos","retrieved","setRetrieved","list","url2","response2","myCode","find","myapi","toLowerCase","algo","Methodology","textAlign","classNmae","Single","setInfo","fail","setFail","Coins","match","useRouteMatch","path","Coin","coinId","useParams","App","single","setSingle","alert","setAlert","href","data-toggle","data-target","aria-controls","aria-expanded","aria-label","to","Pdf","onSubmit","value","onChange","target","placeholder","role","data-dismiss","aria-hidden","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.be5caef8.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport axios from 'axios'\nimport { ResponsiveContainer, AreaChart, XAxis, YAxis, Area, Tooltip, CartesianGrid, ReferenceLine} from 'recharts';\n\nconst Timeline = ({coin, algorithm, time, reward, electricity, miner}) => {\n    const [resp, setResp] = useState([]);\n    const [received, setReceived] = useState(false)\n    const [rawData, setRawData] = useState([])\n\n    useEffect(async ()=> {\n        const url = 'https://api.minerstat.com/v2/coins-history?time=21627252200&coin=' + coin + '&algo=' + algorithm\n        const response = await axios.get(url);\n        setResp(response)\n        setReceived(true)\n    }, [])\n\n    const calcUpper = (price) => {\n        let timeSec = -1;\n        let parsedRew = -1;\n        if (time) timeSec = parseFloat(time.replace(',',''), 10)\n        if (reward) parsedRew = parseFloat(reward.replace(',',''), 10)\n        if (time && time.includes(\"minute\")) {\n            timeSec = timeSec * 60;\n        }\n        let profit = price *  parsedRew / timeSec;\n        let upperEC = profit * 3.6 * 1000000 / electricity;\n        return Math.round(upperEC)\n    }\n\n\n    const calcLower = (hashrate) => {\n        if (miner) {\n            let networkHR = hashrate\n            if (typeof hashrate === \"string\") {\n                networkHR = parseStringHashrate(hashrate)\n            }\n            const hr = parseInt(miner.hashrate) * unitConvert(miner.hashrate.charAt(miner.hashrate.length - 1))\n            const pw = parseInt(miner.power)\n            let lowerEC = networkHR / hr * pw\n            return Math.round(lowerEC)\n        }\n        return -1\n    }\n\n    function numberWithCommas(x) {\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    }   \n\n    const unitConvert = (c) => {\n        if (c === 'K') return 1e3;\n        else if (c === 'M') return 1e6;\n        else if (c === 'G') return 1e9;\n        else if (c === 'T') return 1e12;\n        else if (c === 'P') return 1e15;\n        else return -1\n    }\n    const parseStringHashrate = (str) => {\n        return parseFloat(str) * unitConvert(str.charAt(str.length - 4))\n    }\n    function timeConverter(UNIX_timestamp){\n        var a = new Date(UNIX_timestamp * 1000);\n        var months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\n        var year = a.getFullYear();\n        var month = months[a.getMonth()];\n        var date = a.getDate();\n        var hour = a.getHours();\n        var min = a.getMinutes();\n        var sec = a.getSeconds();\n        var time = date + ' ' + month + ' ' + year;\n        return time;\n    }\n\n    const data = [\n  {\n    \"name\": \"Page A\",\n    \"uv\": 4000,\n    \"pv\": 2400,\n    \"amt\": 2400\n  },\n  {\n    \"name\": \"Page B\",\n    \"uv\": 3000,\n    \"pv\": 1398,\n    \"amt\": 2210\n  },\n  {\n    \"name\": \"Page C\",\n    \"uv\": 2000,\n    \"pv\": 9800,\n    \"amt\": 2290\n  },\n  {\n    \"name\": \"Page D\",\n    \"uv\": 2780,\n    \"pv\": 3908,\n    \"amt\": 2000\n  },\n  {\n    \"name\": \"Page E\",\n    \"uv\": 1890,\n    \"pv\": 4800,\n    \"amt\": 2181\n  },\n  {\n    \"name\": \"Page F\",\n    \"uv\": 2390,\n    \"pv\": 3800,\n    \"amt\": 2500\n  },\n  {\n    \"name\": \"Page G\",\n    \"uv\": 3490,\n    \"pv\": 4300,\n    \"amt\": 2100\n  }\n]\n\n    const getData = () => {\n        const data = resp.data\n        let count = Object.keys(data[coin]).length;\n        let dataArr = []\n        let delta = Math.floor(count / 20)\n        let keys = Object.keys(data[coin])\n        for (let i = delta; i < count; i += delta) {\n            let key = keys[i]\n            let lb = calcLower(data[coin][key][1]) * -1 / 1e3;\n            let ub = calcUpper(data[coin][key][3]) / 1e3;\n            let date = timeConverter(key)\n            const point = {\n                \"date\": date,\n                \"bounds\": [\n                    lb,\n                    ub\n                ],\n                \"hashrate\": data[coin][key][1],\n                \"price\": data[coin][key][3]\n            }\n            dataArr.push(point)\n        }\n        return dataArr\n    }\n\n    const renderData = () => {\n        if (received) {\n            let rawData = getData()\n            console.log(rawData)\n            return (\n                <div class=\"container-fluid\" >\n                    <ResponsiveContainer width=\"95%\" height={400}>\n                        <AreaChart\n                            data={rawData}\n                            margin={{\n                                top: 20, right: 20, bottom: 20, left: 20,\n                            }}\n                            >\n                            <XAxis type=\"category\" dataKey=\"date\" />\n                            <YAxis />\n                            <Tooltip />\n                            <Area dataKey=\"bounds\" stroke=\"goldenrod\" fill=\"gold\" />\n\n                            \n                        </AreaChart>\n                    </ResponsiveContainer>\n                </div>\n            )\n        }\n        else {\n            return (\n                <div>Loading...</div>\n            )\n        }\n    }\n\n    return (\n        <div id=\"model\" className=\"container-fluid justify-content-center\">\n            {renderData()}\n        </div>\n    )\n}\n\nexport default Timeline","import React from 'react'\nimport \"../styles/Card.css\"\n\n\nconst Consumption = (props) => {\n\n    const calcUpper = () => {\n        let timeSec = -1;\n        let parsedRew = -1;\n        if (props.time) timeSec = parseFloat(props.time.replace(',',''), 10)\n        if (props.reward) parsedRew = parseFloat(props.reward.replace(',',''), 10)\n        if (props.time && props.time.includes(\"minute\")) {\n            timeSec = timeSec * 60;\n        }\n        let profit = props.price *  parsedRew / timeSec;\n        let upperEC = profit * 3.6 * 1000000 / props.electricity;\n        return Math.round(upperEC)\n    }\n\n\n    const calcLower = () => {\n        if (props.miner) {\n            let networkHR = props.hashrate\n            if (typeof props.hashrate === \"string\") {\n                networkHR = parseStringHashrate(props.hashrate)\n            }\n            const hr = parseInt(props.miner.hashrate) * unitConvert(props.miner.hashrate.charAt(props.miner.hashrate.length - 1))\n            const pw = parseInt(props.miner.power)\n            let lowerEC = networkHR / hr * pw\n            return Math.round(lowerEC)\n        }\n        return -1\n    }\n\n\n    const Annualize = (energy) => {\n        let Wh = energy * 24 * 365 / 1e12;\n        return Wh;\n    }\n\n    function numberWithCommas(x) {\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    }   \n\n    const unitConvert = (c) => {\n        if (c === 'K') return 1e3;\n        else if (c === 'M') return 1e6;\n        else if (c === 'G') return 1e9;\n        else if (c === 'T') return 1e12;\n        else if (c === 'P') return 1e15;\n        else return -1\n    }\n\n    const parseStringHashrate = (str) => {\n        return parseFloat(str) * unitConvert(str.charAt(str.length - 4))\n    }\n\n    const renderBound = (val, unit) => {\n        return (\n            <span>\n                {numberWithCommas(Math.round(val))} {unit}\n            </span>\n        )\n    }\n\n    const renderAnnualize = (val, unit) => {\n        return (\n            <span>\n                {Math.round(val * 1000) / 1000} {unit}\n            </span>\n        )\n    }\n    return (\n        <div className=\"container\">\n            <br/>\n            <div id=\"Estimation\">\n                <h2>\n                    Energy Consumption: <em>{renderBound(calcLower() / 1e3, 'kW')} - {renderBound(calcUpper() / 1e3, 'kW')}</em>\n                </h2>\n                <h3 id=\"annual\">\n                    Annualized: {renderAnnualize(Annualize(calcLower()), 'TWh')} - {renderAnnualize(Annualize(calcUpper()), 'TWh')}\n                </h3>\n            </div>\n\n            <br/>\n        </div>\n    )\n}\n\nexport default Consumption","import React from 'react'\n\nconst DisplayPools = ({pools, showAll}) => {\n    \n    const renderPools = (expand) => {\n        return (\n            pools.map((pool, i) => {\n                if (!expand && i >= 10) {\n                    return <span key={i}></span>\n                }\n                return (\n                    <span key={i}>{pool.url}: <em>{pool.hashrate}</em>, <b style={{color: \"red\"}}>{pool.countries}</b>     |      </span>\n                )\n                })\n        )\n    }\n\n    return (\n        <span>\n            {renderPools(showAll)}\n        </span>\n    )\n}\n\nexport default DisplayPools","import React from 'react'\n\nconst DisplayMiners = ({miners, showAll}) => {\n    \n    const renderPools = (expand) => {\n        return (\n            miners.map((miner, i) => {\n                 if (!expand && i >= 10) {\n                    return <span key={i}></span>\n                }\n                return (\n                    <span key={i}>{miner.name}: <em>{miner.hashrate} {miner.power}</em> | </span>\n                )\n            })\n        )\n    }\n\n    return (\n        <span>\n            {renderPools(showAll)}\n        </span>\n    )\n}\n\nexport default DisplayMiners","import React, {useState, useEffect} from 'react'\nimport Timeline from './Timeline'\nimport Consumption from './Consumption'\nimport DisplayPools from './DisplayPools'\nimport DisplayMiners from './DisplayMiners'\nimport '../styles/Card.css'\nimport axios from 'axios'\n\nconst Card = ({code, info, electricity}) => {\n    const [coin, setCoin]= useState([])\n    const [pools, setPools] = useState([])\n    const [miners, setMiners] = useState([])\n    const [expandPool, setExpandPool] = useState(false)\n    const [expandMiner, setExpandMiner] = useState(false)\n    const [showTimeline, setShowTimeline] = useState(false)\n\n    useEffect(async ()=> {\n        const url = 'https://crypto-energy-api.herokuapp.com/coins/' + code\n        const response = await axios.get(url);\n        setCoin(response.data.info)\n        setPools(response.data.pools)\n        setMiners(response.data.miners)\n    }, [code])\n\n    function numberWithCommas(x) {\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    }   \n\n    const handlePoolClick = e => {\n        e.preventDefault()\n        setExpandPool(() => {\n            return !expandPool\n        })\n    }\n\n    const handleMinerClick = e => {\n        e.preventDefault()\n        setExpandMiner(() => {\n            return !expandMiner\n        })\n    }\n\n    const twoSigFig = (num) => {\n        return (Math.round(num * 100) / 100)\n    }\n    const getPrefix = (num) => {\n        const a = num.toString().indexOf('.')\n\n        let len = num.toString().length;\n        if (a !== -1) len = num.toString().substring(0, a).length;\n        if (len > 21) {\n            return (\n                <span>\n                    {twoSigFig(num / 1e21)} ZH/s\n                </span>\n            )\n        }\n        else if (len > 18) {\n            return (\n                <span>\n                    {twoSigFig(num / 1e18)} EH/s\n                </span>\n            )\n        }\n        else if (len > 15) {\n            return (\n                <span>\n                    {twoSigFig(num / 1e15)} PH/s\n                </span>\n            )\n        }\n        else if (len > 12) {\n            return (\n                <span>\n                    {twoSigFig(num / 1e12)} TH/s\n                </span>\n            )\n        }\n        else if (len > 9) {\n            return (\n                <span>\n                    {twoSigFig(num / 1e9)} GH/s\n                </span>\n            )\n        }\n        else if (len > 6) {\n            return (\n                <span>\n                    {twoSigFig(num / 1e6)} MH/s\n                </span>\n            )\n        }\n        else if (len > 3) {\n            return (\n                <span>\n                    {twoSigFig(num / 1e3)} kH/s\n                </span>\n            )\n        }\n        else {\n            return (\n                <span>\n                    {twoSigFig(num)} H/s\n                </span>\n            )\n        }\n    }\n\n    const renderTimeline = () => {\n        if (showTimeline) {\n            return <Timeline\n                        coin={info.coin}\n                        algorithm={info.algorithm}\n                        time={coin.time}\n                        reward={coin.reward}\n                        electricity={electricity}\n                        miner={miners[0]}\n                    />\n        }\n        else {\n            return <span></span>\n        }\n    }\n\n    const handleTimeline = () => {\n        setShowTimeline(() => {\n            return !showTimeline;\n        })\n    }\n\n    return (\n        <div className=\"container card\">\n            <h2><b>{coin.name} ({info.coin}):</b></h2>\n            <h3>\n                Algorithm: {info.algorithm}<br/>\n                Hashrate: {info.network_hashrate === -1 ? `${coin.network_hashrate}` : getPrefix(info.network_hashrate)} <br/>\n                Block Time: {coin.time}<br/>\n                Block Reward: {coin.reward} {info.coin}\n            </h3>\n            <h3>\n                Price: ${info.price === -1 ? coin.price : info.price}\n            </h3>\n            <Consumption\n                hashrate={(info.network_hashrate !== -1) ? info.network_hashrate : coin.network_hashrate}\n                time={coin.time}\n                reward={coin.reward}\n                price={info.price}\n                electricity={electricity}\n                miner={miners[0]}\n            />\n            <div className=\"container-fluid text-center\">\n                <button onClick={handleTimeline} className=\"btn btn-lg\" style={{backgroundColor: \"gold\"}}>{showTimeline ? 'Hide Timeline' : 'Show Timeline'}</button>\n            </div>\n            {renderTimeline()}\n            <br/>\n            <p>\n                <span><b>Pools: </b></span>\n                <DisplayPools pools={pools} showAll={expandPool}/>\n                <button onClick={handlePoolClick} className=\"btn btn-sm btn-outline-info\">{expandPool ? 'show less' : 'show more'}</button>\n            </p>\n            <p>\n                <span><b>Miners: </b></span>\n                <DisplayMiners miners={miners} showAll={expandMiner}/>\n                <button onClick={handleMinerClick} className=\"btn btn-sm btn-outline-info\">{expandMiner ? 'show less' : 'show more'}</button>\n            </p>\n            \n        </div>\n    )\n}\n\nexport default Card","import React, {useState, useEffect} from 'react'\nimport Card from './components/Card'\nimport axios from 'axios'\n\nconst Dashboard = () => {\n    const [codes, setCodes] = useState([])\n    const [infos, setInfos] = useState([])\n    const [retrieved, setRetrieved] = useState(false)\n    useEffect(async () => {\n        const url = 'https://crypto-energy-api.herokuapp.com/coins';\n        const response = await axios.get(url);\n        const c = response.data\n        let list = c[0].code;\n        for (let i = 1; i < c.length; i++) {\n            list += ',' + c[i].code\n        }\n        const url2 = 'https://api.minerstat.com/v2/coins?list=' + list;\n        const response2 = await axios.get(url2);\n        setCodes(c)\n        setInfos(response2.data)\n        setRetrieved(true)\n    }, [])\n\n    const renderCards = () => {\n        if (!retrieved) {\n            return (\n                <h2>Loading...</h2>\n            )\n        }\n        else {\n            return (\n                infos.map((info, i) => {\n                    function isCorrect(myapi) {\n                        return myapi.code === info.coin\n                    }\n                    let myCode = codes.find(isCorrect)\n                    if (!myCode.time || !myCode.reward) {\n                        return (\n                            <span></span>\n                        )\n                    }\n                    if (info.algorithm.toLowerCase().substring(0,3) !== myCode.algo.toLowerCase().substring(0,3)) {\n                        return (\n                            <span></span>\n                        )\n                    }\n                    return (\n                        <div key={i}>\n                            <Card code={info.coin} info={info} electricity={0.1} />\n                            <br />\n                            <br />\n                        </div>\n                    )\n                })            )\n        }\n\n    }\n\n    return (\n        <div>\n            <br/>\n            <h1 className=\"text-center\">The Cryptocurrency Energy Consumption Index</h1>\n            <br/>\n                {renderCards()}\n        </div>\n    )\n}\n\nexport default Dashboard","import React from 'react';\n\nconst Methodology = () => {\n    return (\n        <div>\n            <br/>\n            <h2 style={{textAlign: \"center\"}}>Methodology</h2>\n            <p>\n                <b>Top-Down Estimation: </b>\nThe top-down approach for estimating a cryptocurrency’s energy consumption looks at the economic viability of mining a cryptocurrency using electricity prices and coin market prices. Since every PoW cryptocurrency creates new coins as a method to reward miners, we can calculate the rate of profit generation using the market price of the coin, how much of the coin is rewarded when mined (block reward), and the average time between each mined block (block time). For each\n\n   \n coin, the market price, block rewards, and block times are gathered from <em>miningpoolstats.stream</em> <em>and minerstat.com</em>. We can approximate the rate of profit generation to be\n<br/><br/>\n<div classNmae=\"text-center\"><em>profit ($/s) = Market Price ($) x Reward (coins) / Block Time (s)</em></div>\n<br/>\n To estimate the upper bound for energy consumption, we assume that cryptocurrency miners only break even and use all of their profits to pay their energy bills. We will use the industrial price of electricity in the US of $0.10/kWh as an estimation of the electricity price of cryptocurrency miners4. Thus, using the price and the price of electricity we can estimate the rate of energy consumption to be\n<br/><br/>\n<div className=\"text-center\"><em>Energy Consumption (J/s) = profit ($/s) × (1𝑘𝑊h / price of electricity ($)) × (3.6×10<sup>6</sup>J / 1𝑘𝑊h)</em></div><br/>\nThis energy consumption calculation should give us an estimate on the energy consumption upper-bound because it assumes the sole cost associated with mining is electricity costs.<br/><br/> \n<hr></hr><br/>\n<b>Bottom-Up Estimation:</b>\nThe bottom-up approach takes a more technical look at the hash rate of the coins and their mining hardware4. By examining the algorithm and difficulty of each cryptocurrency, the hash rate of each coin can be estimated. We will use the hash-rate from minerstat.com for our calculations. The next step is to locate the most efficient hardware for mining each cryptocurrency and find the hash rate and energy efficiency of those specific machines. An updated list of the most efficient mining hardware can be found under the ranking section of the f2pool mining pool, which is one of the top crypto mining pools. If we assume that every miner is using the most efficient hardware possible, we can determine how many machines are mining by dividing the machine’s hash rate by the network hash rate. Then, using the machine’s power consumption data we can estimate energy consumption using this formula\n<br/><br/>\n<div className=\"text-center\">\n    <em>Energy Consumption (J/s) = market hashrate (H/s) × Power Consumption (J/s) / hardware hashrate (H/s)</em>\n</div><br/>\nThis constitutes a lower bound because it assumes each miner is mining with maximum efficiency.\n            </p>\n        </div>\n    )\n}\n\nexport default Methodology","import React, {useState, useEffect} from 'react';\nimport axios from 'axios'\nimport Card from './Card'\n\nconst Single = ({code, electricity}) => {\n    const [info, setInfo] = useState('');\n    const [retrieved, setRetrieved] = useState(false);\n    const [fail, setFail] = useState(false)\n    useEffect(async () => {\n        const url = 'https://api.minerstat.com/v2/coins?list=' + code;\n        const response = await axios.get(url);\n        if (response.data.length === 0) setFail(true)\n        else {\n            setInfo(response.data[0])\n            setRetrieved(true)\n        }\n    }, [code])\n\n    const renderCard = () => {\n        if (fail) {\n            return (\n                <div>\n                <h2>That coin is not in our database :(</h2>\n                <br/>\n                <h3>Remember to input the coin code and not the name! (e.g. enter <b>BTC</b> for Bitcoin)</h3>\n                </div>\n            )\n        }\n        else if (! retrieved) {\n            return (\n                <h2>Loading...</h2>\n            )\n        }\n        else {\n            return (\n                <Card code={code} info={info} electricity={electricity}/>\n            )\n        }\n    }\n\n    return (\n        <div>\n            <br />\n            {renderCard()}\n        </div>\n    )\n}\n\nexport default Single","export default __webpack_public_path__ + \"static/media/research.70185867.pdf\";","import React, {useState} from 'react'\nimport Dashboard from './Dashboard'\nimport Methodology from './components/Methodology'\nimport Single from './components/Single'\nimport Pdf from \"./components/research.pdf\";\nimport './styles/Card.css'\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useParams,\n  useRouteMatch\n} from \"react-router-dom\";\n\nconst App = () => {\n    const [single, setSingle] = useState('')\n    const [alert, setAlert] = useState(false)\n\n    const handleSingle = e => {\n        setSingle(e.target.value);\n        console.log(e.target.value);\n    }\n\n    const renderAlert = () => {\n        if (alert) {\n        return (\n            <div className=\"alert alert-warning\" role=\"alert\">\n                Please press the \"Submit\" button instead of enter when searching for coins\n                <button type=\"button\" className=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\n                    <span aria-hidden=\"true\">&times;</span>\n                </button>\n            </div>\n        )\n        }\n        return (\n            <span></span>\n        )\n    }\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        setAlert(true)\n    }\n\n    return (\n    <Router>\n      <div>\n\n    <nav className=\"navbar sticky-top navbar-expand-lg navbar-light\" id=\"nav\">\n        <a className=\"navbar-brand\" href='/'>CECI</a>\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavDropdown\" aria-controls=\"navbarNavDropdown\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarNavDropdown\">\n            <ul className=\"navbar-nav\">\n            <li className=\"nav-item active\">\n                <Link className=\"nav-link\" to=\"/\">Home</Link>\n            </li>\n            <li className=\"nav-item active\">\n                <Link className=\"nav-link\" to=\"/methodology\">Methodology</Link>\n            </li>\n            <li className=\"nav-item active\">\n                <a className=\"nav-link\" href = {Pdf}>Research Paper (pdf)</a>\n                <Link className=\"nav-link\" to=\"/\"></Link>\n            </li>\n            </ul>\n            <form className=\"form-inline my-2 my-lg-0\" onSubmit={handleSubmit}>\n                <input className=\"form-control mr-sm-2\" type=\"search\" value={single} onChange={handleSingle} placeholder=\"Search by Code (BTC)\" aria-label=\"Search\"/>\n                <Link to={\"/coins/\" + single} className=\"btn btn-outline-secondary my-2 my-sm-0\" type=\"submit\">Search</Link>\n            </form>\n        </div>\n    </nav>\n        {renderAlert()}\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n            <Route path=\"/methodology\">\n                <Methodology/>\n            </Route>\n            <Route path=\"/coins\">\n                <Coins />\n            </Route>\n            <Route path=\"/\">\n                <Dashboard />\n            </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\n\nfunction Coins() {\n  let match = useRouteMatch();\n\n  return (\n    <div>\n      <Switch>\n        <Route path={`${match.path}/:coinId`}>\n          <Coin />\n        </Route>\n        <Route path={match.path}>\n          <h3>Please Enter a Coin Code (e.g. BTC)</h3>\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nfunction Coin() {\n  let { coinId } = useParams();\n \n  return (\n        <Single code={coinId} electricity={0.1}/>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.querySelector('#root'));\n"],"sourceRoot":""}